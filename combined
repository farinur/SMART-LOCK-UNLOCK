import cv2
import mediapipe as mp
import speech_recognition as sr
import pyttsx3
import requests
import time
from datetime import datetime
import threading
import queue # For safe inter-thread communication
import numpy as np
from flask import Flask, request # For the keypad server

ESP32_CAM_IP = "192.168.1.100"  # <<< MUST REPLACE WITH our ESP32-CAM IP
ESP32_CAM_STREAM_URL = f"http://{ESP32_CAM_IP}:81/stream" # URL for the video stream ( 0 for local webcam testing)
PYTHON_SERVER_IP = "YOUR_PYTHON_PC_IP" # <<< MUST REPLACE WITH THE IP ADDRESS OF our PC
PYTHON_SERVER_PORT = 5000 # Port for the Flask server to receive keypad input

# --- Authentication Configuration ---
AUTHORIZED_PIN = "2667" 
VOICE_UNLOCK_COMMAND = "BLACK"
VOICE_LOCK_COMMAND = "YELLOW"
FACE_IMAGES_PATH = "D:/python-opencv/face _recognition/images/" 

# --- System Parameters ---
LOG_COOLDOWN_SECONDS = 5 # Log access/denial only once every X seconds
NO_FACE_TIMEOUT_SECONDS = 10 # If no faces detected for this long, trigger fallback prompt
BRIGHTNESS_THRESHOLD = 50 # Example: very dark if avg < 50 (0-255 scale)
GESTURE_COOLDOWN_SECONDS = 3 # Only detect a new gesture every 3 seconds

# --- Global State Variables ---
# Use locks for variables modified by multiple threads to prevent race conditions
door_unlocked = False
door_state_lock = threading.Lock() # Protects 'door_unlocked'

# Queues for inter-thread communication (producer-consumer pattern)
face_recognition_queue = queue.Queue() # (command, name)
keypad_input_queue = queue.Queue()     # (command, pin_or_key)
gesture_command_queue = queue.Queue()  # (command)
voice_command_queue = queue.Queue()    # (command)

# --- Speech Engine and Lock ---
engine = pyttsx3.init()
speech_lock = threading.Lock() # Ensures only one speech output at a time

def speak(text):
    """Speaks the given text, acquiring a lock to prevent overlaps."""
    with speech_lock:
        engine.say(text)
        engine.runAndWait()

# --- Logging functions ---
last_access_log_time = 0
last_failed_log_time = 0

def log_failed_attempt(method="Unknown", reason=""):
    """Logs a failed access attempt with cooldown."""
    global last_failed_log_time
    current_time = time.time()
    if current_time - last_failed_log_time > LOG_COOLDOWN_SECONDS:
        with open("failed_attempts_log.txt", "a") as log_file:
            log_file.write(f"[{datetime.now()}] ⚠️ Access Denied via {method} - Reason: {reason}\n")
        print(f"Logged: Access Denied via {method} - Reason: {reason}")
        last_failed_log_time = current_time

def log_success(name="Authorized User", method="Unknown"):
    """Logs a successful access attempt with cooldown."""
    global last_access_log_time
    current_time = time.time()
    if current_time - last_access_log_time > LOG_COOLDOWN_SECONDS:
        with open("access_log.txt", "a") as log_file:
            log_file.write(f"[{datetime.now()}] ✅ Access granted to {name} via {method}\n")
        print(f"Logged: Access granted to {name} via {method}")
        last_access_log_time = current_time

# --- Door Control Functions (Interact with ESP32) ---
def send_unlock_command():
    """Sends an HTTP GET request to unlock the door via ESP32-CAM."""
    global door_unlocked
    with door_state_lock: # Protect shared variable
        if not door_unlocked:
            try:
                requests.get(f"http://{ESP32_CAM_IP}/unlock", timeout=1)
                speak("Welcome. Door is unlocked.")
                print("ESP32 Command Sent: Door Unlocked")
                door_unlocked = True
                return True
            except requests.exceptions.ConnectionError:
                print(f"Error: Could not connect to ESP32-CAM at {ESP32_CAM_IP}. Is it online?")
                speak("Connection error to door. Cannot unlock.")
            except requests.exceptions.Timeout:
                print(f"Warning: Connection to ESP32-CAM at {ESP32_CAM_IP} timed out.")
                speak("Door connection timed out. Cannot unlock.")
            except Exception as e:
                print(f"An unexpected error occurred while communicating with ESP32-CAM: {e}")
                speak("An error occurred while trying to unlock.")
        else:
            print("Door is already unlocked. No unlock command sent.")
            speak("Door is already unlocked.")
    return False

def send_lock_command():
    """Sends an HTTP GET request to lock the door via ESP32-CAM."""
    global door_unlocked
    with door_state_lock: # Protect shared variable
        if door_unlocked: # Only try to lock if currently unlocked
            try:
                requests.get(f"http://{ESP32_CAM_IP}/lock", timeout=1)
                speak("Access denied. Door is locked.") # Or "Door is locked"
                print("ESP32 Command Sent: Door Locked")
                door_unlocked = False
                return True
            except requests.exceptions.ConnectionError:
                print(f"Error: Could not connect to ESP32-CAM at {ESP32_CAM_IP}. Is it online?")
                speak("Connection error to door. Cannot lock.")
            except requests.exceptions.Timeout:
                print(f"Warning: Connection to ESP32-CAM at {ESP32_CAM_IP} timed out.")
                speak("Door connection timed out. Cannot lock.")
            except Exception as e:
                print(f"An unexpected error occurred while communicating with ESP32-CAM: {e}")
                speak("An error occurred while trying to lock.")
        else:
            print("Door is already locked. No lock command sent.")
            speak("Door is already locked.")
    return False
def send_lock_command():
    """Sends an HTTP GET request to lock the door via ESP32-CAM."""
    global door_unlocked
    with door_state_lock: # Protect shared variable
        if door_unlocked: # Only try to lock if currently unlocked
            try:
                # When testing on laptop, these requests will likely fail
                requests.get(f"http://{ESP32_CAM_IP}/lock", timeout=0.5) # Reduced timeout for quicker local test error
                speak("Access denied. Door is locked.") # Or "Door is locked"
                print("ESP32 Command Sent: Door Locked")
                door_unlocked = False
                return True
            except requests.exceptions.ConnectionError:
                print(f"Error: Could not connect to ESP32-CAM at {ESP32_CAM_IP}. (Expected during local testing).")
                speak("Connection error to door. Cannot lock.")
            except requests.exceptions.Timeout:
                print(f"Warning: Connection to ESP32-CAM at {ESP32_CAM_IP} timed out. (Expected during local testing).")
                speak("Door connection timed out. Cannot lock.")
            except Exception as e:
                print(f"An unexpected error occurred while communicating with ESP32-CAM: {e}")
                speak("An error occurred while trying to lock.")
        else:
            print("Door is already locked. No lock command sent.")
            speak("Door is already locked.")
    return False

# --- Initializations for all modules ---
# Face Recognition (simple-facerec will be imported and sfr initialized later)
from simple_facerec import SimpleFacerec # Import here to allow dynamic path loading
sfr = None # Placeholder, initialized in main

# Hand Gesture Recognition
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.7
)
mp_draw = mp.solutions.drawing_utils

# Speech Recognition
recognizer = sr.Recognizer()

# Flask App for Keypad
app = Flask(__name__)
keypad_input_buffer = []
keypad_buffer_lock = threading.Lock() # Protects keypad_input_buffer



# 1. Flask Server for Keypad Input
@app.route('/keypad', methods=['POST'])
def receive_keypad_input():
    global keypad_input_buffer
    if request.is_json:
        data = request.get_json()
        key = data.get('key')
        if key is not None:
            print(f"Keypad: Received key from ESP32: {key}")
            with keypad_buffer_lock: # Protect buffer modification
                if key == '#': # Assuming '#' is your "Enter" or "Submit" key
                    entered_pin = "".join(keypad_input_buffer)
                    keypad_input_queue.put(("PIN_ENTERED", entered_pin))
                    keypad_input_buffer.clear()
                    speak("Pin submitted.")
                elif key == '*': # Assuming '*' is your "Clear" key
                    keypad_input_buffer.clear()
                    speak("Cleared.")
                    print("Keypad buffer cleared.")
                elif len(keypad_input_buffer) < len(AUTHORIZED_PIN): # Max PIN length based on authorized PIN
                    keypad_input_buffer.append(str(key))
                    print(f"Keypad: Current PIN buffer: {''.join(keypad_input_buffer)}")
                else:
                    speak("Pin buffer full.")
                    print("Keypad: PIN buffer full, ignoring new digit.")
            return {"status": "success"}, 200
        else:
            return {"status": "error", "message": "No 'key' found in JSON"}, 400
    else:
        return {"status": "error", "message": "Request must be JSON"}, 400

def run_flask_app_thread():
 
    print(f"Flask server will attempt to listen on http://{PYTHON_SERVER_IP}:{PYTHON_SERVER_PORT}")
    # Python PC's firewall allows incoming connections on PYTHON_SERVER_PORT
    app.run(host='0.0.0.0', port=PYTHON_SERVER_PORT, debug=False, use_reloader=False)

# 2. Speech Recognition
def speech_recognition_loop():
    """Continuously listens for voice commands."""
    while True:
        with sr.Microphone() as source:
            print("Speech: Listening for command...")
            speak("Please say your command.")
            try:
                recognizer.adjust_for_ambient_noise(source)
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=3)
            except sr.WaitTimeoutError:
                print("Speech: No speech detected within timeout.")
                time.sleep(0.5) # Small delay before re-listening
                continue
            except Exception as e:
                print(f"Speech: Error capturing audio: {e}")
                time.sleep(1)
                continue

        try:
            command = recognizer.recognize_google(audio).upper()
            print(f"Speech: You said: '{command}'")
            if command == VOICE_UNLOCK_COMMAND:
                voice_command_queue.put(("UNLOCK", "Voice User"))
            elif command == VOICE_LOCK_COMMAND:
                voice_command_queue.put(("LOCK", "Voice User"))
            else:
                speak("Incorrect voice command.")
                log_failed_attempt(method="Voice Command", reason=f"Incorrect command: {command}")
        except sr.UnknownValueError:
            print("Speech: Google Speech Recognition could not understand audio.")
            speak("Sorry, I did not understand that.")
            log_failed_attempt(method="Voice Recognition", reason="Unclear speech")
        except sr.RequestError as e:
            print(f"Speech: Could not request results from Google Speech Recognition service; {e}")
            speak("Speech recognition service is unavailable.")
        except Exception as e:
            print(f"Speech: An unexpected error occurred during speech recognition: {e}")
        time.sleep(0.5) 
